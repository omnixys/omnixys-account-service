name: CI/CD Pipeline ‚Äì Omnixys Account Service

on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main
    tags:
      - "v*" # Nur f√ºr Versionstags (z.B. v1.0.0)

permissions:
  contents: read
  id-token: write # ‚Üê WICHTIG f√ºr Cosign ohne Schl√ºssel (keyless signing)

env:
  COSIGN_EXPERIMENTAL: "true"
  IMAGE_NAME: ${{ secrets.DOCKER_USER }}/${{ secrets.SERVICE }}-service

  POSTGRES_SQL_HOST: ${{ secrets.POSTGRES_SQL_HOST }}
  POSTGRES_SQL_PORT: ${{ secrets.POSTGRES_SQL_PORT }}
  POSTGRES_SQL_DB: ${{ secrets.POSTGRES_SQL_DB }}
  POSTGRES_SQL_USERNAME: ${{ secrets.POSTGRES_SQL_USERNAME }}
  POSTGRES_SQL_PASSWORD: ${{ secrets.POSTGRES_SQL_PASSWORD }}
  POSTGRES_SQL_TEST_DB: ${{ secrets.POSTGRES_SQL_TEST_DB }}
  POSTGRES_SQL_TEST_USERNAME: ${{ secrets.POSTGRES_SQL_TEST_USERNAME }}
  POSTGRES_SQL_TEST_PASSWORD: ${{ secrets.POSTGRES_SQL_TEST_PASSWORD }}

  SERVER_PORT: ${{ secrets.SERVER_PORT }}
  TEST_SERVER_PORT: ${{ secrets.TEST_SERVER_PORT }}

  ACTIVE_PROFILE: ${{ secrets.ACTIVE_PROFILE }}
  HTTPS: ${{ secrets.HTTPS }}

  NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  KC_SERVICE_SECRET: ${{ secrets.KC_SERVICE_SECRET }}
  KC_SERVICE_CLIENT_ID: ${{ secrets.KC_SERVICE_CLIENT_ID }}
  KC_SERVICE_REALM: ${{ secrets.KC_SERVICE_REALM }}
  KC_SERVICE_HOST: ${{ secrets.KC_SERVICE_HOST }}
  KC_SERVICE_PORT: ${{ secrets.KC_SERVICE_PORT }}

  KAFKA_HOST: ${{ secrets.KAFKA_HOST }}
  TEMPO_HOST: ${{ secrets.TEMPO_HOST }}
  KEYS_PATH: ${{ secrets.KEYS_PATH }}

jobs:
  build:
    name: üî® Build & Test (Maven)
    runs-on: ubuntu-latest
    outputs:
      CURRENT_DATE: ${{ steps.set_date.outputs.CURRENT_DATE }}
    strategy:
      matrix:
        java-version: [24]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print ref name
        run: echo "This workflow was triggered by ${{ github.ref_name }}"

      - name: Print actor
        run: echo "The actor is ${{ github.actor }}"

      - name: Print tag
        run: echo "The tag is ${{ github.ref_name }}"

      - name: Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ matrix.java-version }}

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Build with Maven
        run: mvn clean install -DskipTests=false

      - name: Set CURRENT_DATE
        id: set_date
        run: |
          DATE=$(date +'%Y-%m-%d')
          echo "CURRENT_DATE=$DATE" >> $GITHUB_OUTPUT

      - name: Aktualisiere CURRENT_DATE in Organisations-Variable (sicher)
        run: |
          CURRENT_DATE="${{ steps.set_date.outputs.CURRENT_DATE }}"

          if [ -z "$CURRENT_DATE" ]; then
            echo "Fehler: CURRENT_DATE ist leer!"
            exit 1
          fi

          ORG_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)

          EXISTING=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
            | jq -r '.value')

          echo "Updating org-level CURRENT_DATE from $EXISTING to $CURRENT_DATE"

          if [ "$EXISTING" != "$CURRENT_DATE" ]; then
            curl -X PATCH \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
              -d "{\"value\": \"${CURRENT_DATE}\"}"
          else
            echo "CURRENT_DATE ist bereits aktuell: $CURRENT_DATE"
          fi

      - name: Upload Build Artifact (JAR)
        uses: actions/upload-artifact@v4
        with:
          name: omnixys-${{ secrets.SERVICE }}-service-jar
          path: target/*.jar

  # analyze:

  #   runs-on: ubuntu-latest
  #   needs: build
  #   strategy:
  #     matrix:
  #       java-version: [24]
  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v4

  #   - name: Set CURRENT_DATE from Build Output
  #     run: echo "CURRENT_DATE=${{ needs.build.outputs.CURRENT_DATE }}" >> $GITHUB_ENV

  #   - name: Setup Java ${{ matrix.java-version }}
  #     uses: actions/setup-java@v4
  #     with:
  #       distribution: 'temurin'
  #       java-version: ${{ matrix.java-version }}

  #   - name: Run Unit Tests with Coverage
  #     run: mvn test jacoco:report

  #   # - name: Deploy to GitHub Pages
  #   #   uses: peaceiris/actions-gh-pages@v3
  #   #   with:
  #   #     github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #   #     publish_dir: ./docs/backend
  #   #     destination_dir: backend

  package:
    name: üì¶ Package Application
    runs-on: ubuntu-latest
    needs: [build]
    if: github.actor == 'caleb-script' && github.event_name == 'push'
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: omnixys-${{ secrets.SERVICE }}-service-jar
          path: target

      - name: Archive JAR
        run: zip -j invoice-service.zip target/*.jar

      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{ secrets.SERVICE }}-service-package
          path: ${{ secrets.SERVICE }}-service.zip

  docker:
            name: üê≥ Docker Build & Push
            runs-on: ubuntu-latest
            needs: [build, package]
            strategy:
              matrix:
                java-version: [24]
            env:
              CURRENT_DATE: ${{ needs.build.outputs.CURRENT_DATE }}
            if: github.actor == 'caleb-script' && github.event_name == 'push'
            steps:
              - name: Checkout Repository
                uses: actions/checkout@v4

              - name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3
                with:
                  install: true
                  driver-opts: image=moby/buildkit:latest

              - name: Log in to Docker Hub
                uses: docker/login-action@v3
                with:
                  username: ${{ secrets.DOCKER_USER }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

              - name: Set up Docker Cache
                uses: actions/cache@v4
                with:
                  path: /tmp/.buildx-cache
                  key: buildx-${{ github.sha }}
                  restore-keys: |
                    buildx-

              - name: Build and Push Docker Image (Multi-Arch)
                uses: docker/build-push-action@v5
                with:
                  context: .
                  push: true
                  platforms: linux/amd64,linux/arm64
                  tags: |
                    ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }}
                    ${{ env.IMAGE_NAME }}:latest
                  build-args: |
                    REVISION=${{ github.sha }}
                    CREATED=${{ env.CURRENT_DATE }}
                    APP_VERSION=${{ env.CURRENT_DATE }}
                    APP_NAME=${{ secrets.SERVICE }}
                    JAVA_VERSION=${{ matrix.java-version }}
                  cache-from: type=local,src=/tmp/.buildx-cache
                  cache-to: type=local,dest=/tmp/.buildx-cache

              - name: Install cosign
                uses: sigstore/cosign-installer@v3

              - name: Sign Docker Image with cosign (OIDC/GitHub)
                run: |
                  cosign sign --yes --recursive ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }}
                  cosign sign --yes --recursive ${{ env.IMAGE_NAME }}:latest

              - name: Install CycloneDX Maven Plugin
                run: |
                  mvn org.cyclonedx:cyclonedx-maven-plugin:2.7.9:makeAggregateBom

              - name: Upload SBOM (CycloneDX)
                uses: actions/upload-artifact@v4
                with:
                  name: sbom-cyclonedx
                  path: target/bom.json
#cosign verify --key github ghcr.io/your-org/your-image:2025-06-12
